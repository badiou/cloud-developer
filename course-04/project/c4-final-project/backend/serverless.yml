service:
  name: badiou-serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-plugin-canary-deployments
  - serverless-dynamodb-local
  - serverless-offline
    #npm i --save serverless-plugin-canary-deployments
    #npm install --save serverless-dynamodb-local
    #npm install serverless-offline --save-dev
  #This plugin allows to restrict permissions for just one of your function npm i --save-dev serverless-roles-per-functions

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  #Added for making tracing the log for lambda and apiGateway 
  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_S3_BUCKET: badiou-serverless-todo-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    USER_ID: UserId
    MY_CERTIFICAT: MIIDBTCCAe2gAwIBAgIJD/kR1YPyfPWSMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNV
    BAMTFWZzbmR0b2dvLmV1LmF1dGgwLmNvbTAeFw0yMDAyMTcwOTUwMzVaFw0zMzEw
    MjYwOTUwMzVaMCAxHjAcBgNVBAMTFWZzbmR0b2dvLmV1LmF1dGgwLmNvbTCCASIw
    DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANgirhMR1wghtX5uoW+o6PWw4oWY
    hn6E51BNkmqew8BOSNHaYt90lOxFHGos5G3pTKTewSLycWl0F7ZFdB2jSiAVqXmJ
    +hC9sITq18RG+1oJyn9lPciJfWLiqLYI6+qxpJ3CSq7I8MiA4VmlIBUqam4pxp5g
    c/KepbObQb8qMdOx+lmpdbBe9VB4DSxqIlK/9MVf0LSPm8i/lnZw9QthMfd6n+oM
    sBKrdsR+l6VhkB2432WNHxLWrNZspRcN0DH/Rf73aqRGKor3gdIrDTcxEGF1HTin
    yTuTMRCf0iKx9dMMwPr6TnPs1qFuiOM7m1QgaTSzuapmbZzcN2kJrljh9KcCAwEA
    AaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUwNtnrW1nUKEOnMGv+TYa
    xTLbNt0wDgYDVR0PAQH/BAQDAgKEMA0GCSqGSIb3DQEBCwUAA4IBAQB6gg3F4agQ
    vLMaHc3mGqAbwhXAnvVvktPK6Ubst05pRJCLIFZgfgPaNIdF0jvXBrPuBAqmg+es
    3SmIShFFaX3pzRY+qXvyzJ8wi15uwlfkaFS16fup/PEJQEmr0KXe4u26qHe13ZxD
    pIfGI0DXWtirMG8qr8qE8LvZX88u43pq1TazQO/5N7Sp02mNeeTibvk4ELLbDF4q
    wzILJvFtWPyoa5d9rE1YbDrY1neUVAdeohEmNl8Zjl5pp/9ZxiiiCHU8cT8W8aAn
    PS7st0/uUxgvBOHgjFMmZwiplWDUGvAJ22/C3TwAaEaXbRwGPFfLcMxqoc0dSWj2
    53y1pUcryHMo

  iamRoleStatements: #here i have assign a global iam role policies.
    - Effect: Allow
      Action:
        #iamrole pour recupérer la liste des groupes depuis DynamoDB
        - dynamodb:Scan
        #iamrole pour utiliser Post vers une base de données DynamoDB
        - dynamodb:PutItem
        #iamrole pour utiliser faire un getItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

    - Effect: Allow 
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'


#List of the functions
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth

  # TODO: Configure this function
 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoRequest #the same name like custom models

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

    #Allow to validate createTodo
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
  
resources:
  Resources:
    #ressource to make authorization
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # DynamoDB
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # S3 Bucket
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # S3 Bucket Policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*' # Anyone
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
        Bucket: !Ref AttachmentBucket